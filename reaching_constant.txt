import sys
from z3 import *

Var = Lab = None
out = "model.txt"
if len(sys.argv) > 1:
    out = sys.argv[1]

#DECLARE-Vars

#DECLARE-Labs

if Var == None or Lab == None:
    sys.exit()
if Var == [] or Lab == []:
    sys.stderr.write("No variables or labels to analyze.\n")
    sys.exit()

ln = len(Var)*len(Lab)
#DECLARE-BoolVectors

def to_index(tuple):
    v = Var.index(tuple[0])
    l = Lab.index(tuple[1])
    return v*len(Lab) + l

def I(v,l):
    return to_index((v,l))

def from_index(n):
    v = n // len(Lab)
    l = n % len(Lab)
    return (Var[v], Lab[l])

def R(n):
    return from_index(n)

def has_v(v,n):
    i = Var.index(v)
    min = len(Lab)*i
    max = len(Lab)*(i+1) - 1
    return min <= n <= max

def has_l(l,n):
    i = Lab.index(l)
    return n % len(Lab) == i

def union(bools):
    return Or(bools)

def print_model(m):
    includes = {}
    for k in m:
        if m[k]: #All the true values
            # Printer assumes z3 format of vectorName__index
            k = k.__str__()
            # This defaults to unicode, so for pretty printing we use ascii
            rc = k[0:k.find('_')].encode("ascii")
            index = k[k.find('_')+2:]
            pair = R(int(index))
            try:
                includes[rc].append(pair)
            except:
                includes[rc] = [pair]
    # Prints in a reasonable order to read
    for k,v in sorted(includes.items(), key=lambda (x,y): (int(x[2:]), x[0:2])):
        print k.upper()+":",
        print sorted(v, key=lambda x: (x[0].__str__(), x[1].__str__()))

def write_model(m, file):
    includes = {}
    for k in m:
        if m[k]: #All the true values
            # Printer assumes z3 format of vectorName__index
            k = k.__str__()
            # This defaults to unicode, so for pretty printing we use ascii
            rc = k[0:k.find('_')].encode("ascii")
            index = k[k.find('_')+2:]
            pair = R(int(index))
            try:
                includes[rc].append(pair)
            except:
                includes[rc] = [pair]
    # Prints in a reasonable order to read
    f = open(file, "w")
    for k,v in sorted(includes.items(), key=lambda (x,y): (int(x[2:]), x[0:2])):
        f.write(k.upper()+": ")
        pairs = sorted(v, key=lambda x: (x[0].__str__(), x[1].__str__()))
        f.write("%s\n"%(str(pairs)))

def initialize(equation, *pred):
    initialized = True
    for i in range(ln):
        if i % len(Lab) == len(Lab)-1: # (_,l?)
            r.append(equation[i] == True)
            # We do not require other variables not to appear because of the
            # case where the first statement is a WHILE, then it will
            # potentially have defined predecessors

def predecessors(lab, *pred):
    eq_pair = Lab.index(lab) + 1
    exits = map((lambda x: enex[x][1]), pred)
    for i in range(ln):
        preds = map((lambda x: x[i]), exits)
        r.append(enex[eq_pair][0][i] == union(preds))

def assignment(var, lab):
    eq_pair = Lab.index(lab) + 1
    for i in range(ln):
        if has_v(var, i):
            if i == I(var, lab):
                r.append(enex[eq_pair][1][i] == True)
            else:
                r.append(enex[eq_pair][1][i] == False)
        else:
            r.append(enex[eq_pair][1][i] == enex[eq_pair][0][i])

def non_assignment(lab):
    eq_pair = Lab.index(lab) + 1
    for i in range(ln):
        r.append(enex[eq_pair][1][i] == enex[eq_pair][0][i])

s = Solver()
r = []
initialized = False

#DECLARE-enex

#DECLARE-statements

if len(r) == 0:
    # There are no rules, continuing would create initialize rule and none else
    # If len(r) is zero then we do not want z3 to run at all.
    sys.exit(1)

if not initialized:
    initialize(en1)

s.add(And(r))
if s.check() == sat:
    print_model(s.model())
    write_model(s.model(), out)
else:
    print s.check()
